csharp
using UnityEngine;

public class PlayerMovement : MonoBehaviour
{
    public float moveSpeed = 5f; // Speed of the player
    public float rotationSpeed = 700f; // Speed of player rotation

    private CharacterController controller;

    void Start()
    {
        controller = GetComponent<CharacterController>();
    }

    void Update()
    {
        MovePlayer();
    }

    private void MovePlayer()
    {
        float horizontal = Input.GetAxis("Horizontal");
        float vertical = Input.GetAxis("Vertical");

        Vector3 direction = new Vector3(horizontal, 0, vertical).normalized;

        if (direction.magnitude >= 0.1f)
        {
            // Calculate the target rotation
            float targetAngle = Mathf.Atan2(direction.x, direction.z) * Mathf.Rad2Deg;
            Quaternion rotation = Quaternion.Euler(0, targetAngle, 0);
            transform.rotation = Quaternion.RotateTowards(transform.rotation, rotation, rotationSpeed * Time.deltaTime);

            // Move the player
            controller.Move(direction * moveSpeed * Time.deltaTime);
        }
    }
}csharp
using UnityEngine;

public class EnemyAI : MonoBehaviour
{
    public Transform player; // Reference to the player
    public float chaseDistance = 10f; // Distance to start chasing the player
    public float attackDistance = 2f; // Distance to attack the player
    public float moveSpeed = 3f; // Speed of the enemy

    private void Update()
    {
        float distanceToPlayer = Vector3.Distance(player.position, transform.position);
        
        if (distanceToPlayer < chaseDistance)
        {
            ChasePlayer();
            if (distanceToPlayer < attackDistance)
            {
                AttackPlayer();
            }
        }
    }

    private void ChasePlayer()
    {
        transform.LookAt(player);
        transform.position += transform.forward * moveSpeed * Time.deltaTime;
    }

    private void AttackPlayer()
    {
        // Attack logic (e.g., reduce player's health)
        Debug.Log("Attacking Player!");
    }
}csharp
using System.Collections.Generic;
using UnityEngine;

public class InventorySystem : MonoBehaviour
{
    private Dictionary<string, int> inventory = new Dictionary<string, int>(); // Store items and their quantities

    public void AddItem(string itemName, int quantity)
    {
        if (inventory.ContainsKey(itemName))
        {
            inventory[itemName] += quantity; // Increase quantity if item exists
        }
        else
        {
            inventory[itemName] = quantity; // Add new item
        }
        Debug.Log($"Added {quantity} of {itemName}. Total: {inventory[itemName]}");
    }

    public void RemoveItem(string itemName, int quantity)
    {
        if (inventory.ContainsKey(itemName) && inventory[itemName] >= quantity)
        {
            inventory[itemName] -= quantity; // Decrease quantity
            Debug.Log($"Removed {quantity} of {itemName}. Remaining: {inventory[itemName]}");
        }
        else
        {
            Debug.Log("Not enough items to remove or item doesn't exist.");
        }
    }

    public void ShowInventory()
    {
        foreach (var item in inventory)
        {
            Debug.Log($"{item.Key}: {item.Value}");
        }
    }
}csharp
using UnityEngine;
using UnityEngine.SceneManagement;

public class UIManager : MonoBehaviour
{
    public GameObject mainMenu; // Reference to the main menu UI
    public GameObject wardrobeMenu; // Reference to the wardrobe UI
    public int playerCoins = 0; // Player's coin count

    public void PlayButtonClicked()
    {
        // Display options for Solo or Multiplayer
        Debug.Log("Displaying game modes: Solo or Multiplayer.");
        // Logic to show mode selection
    }

    public void WardrobeButtonClicked()
    {
        wardrobeMenu.SetActive(true); // Show wardrobe menu
        mainMenu.SetActive(false); // Hide main menu
        Debug.Log("Wardrobe opened.");
    }

    public void BackToMainMenu()
    {
        wardrobeMenu.SetActive(false); // Hide wardrobe menu
        mainMenu.SetActive(true); // Show main menu
        Debug.Log("Returned to Main Menu.");
    }

    public void UpdateCoins(int amount)
    {
        playerCoins += amount;
        Debug.Log($"Coins updated: {playerCoins}");
    }
}
